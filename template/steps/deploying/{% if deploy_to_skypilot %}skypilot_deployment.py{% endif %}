# {% include 'template/license_header' %}

from typing import Optional, List

import os
import re
import sky
from huggingface_hub import create_branch, login, HfApi

from zenml import step
from zenml.client import Client
from zenml.logger import get_logger

# Initialize logger
logger = get_logger(__name__)


@step()
def deploy_to_skypilot(
):
    """
    Args:
        mlfow_model_name: The name of the model in MLFlow.
        stage: The stage of the model in MLFlow.

    Returns:
        The trained model and tokenizer.
    """
    ### ADD YOUR OWN CODE HERE - THIS IS JUST AN EXAMPLE ###
    zenml_repo_root = Client().root
    if not zenml_repo_root:
        logger.warning(
            "You're running the `deploy_to_huggingface` step outside of a ZenML repo."
            "Since the deployment step to huggingface is all about pushing the repo to huggingface, "
            "this step will not work outside of a ZenML repo where the gradio folder is present."
        )
        raise
    gradio_task_yaml = os.path.join(zenml_repo_root, "gradio", "serve.yaml")
    task = sky.Task.from_yaml(gradio_task_yaml)
    cluster_name =  re.sub(r'[^a-zA-Z0-9]+', '-', '{{product_name}}-cluster')
    sky.launch(task, cluster_name=cluster_name)
    ### YOUR CODE ENDS HERE ###
